#!/bin/bash
# +--------------------------------------------------------------------+
# EFA-Configure
# Version 20130812
# +--------------------------------------------------------------------+
# Copyright (C) 2012~2013  http://www.efa-project.org
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# +--------------------------------------------------------------------+

# +---------------------------------------------------+
# Display menus
# +---------------------------------------------------+
show_menu() {
    menu=1
	while [ $menu == "1" ]
		do
			func_echo-header 
			echo -e "Please select the item you want to modify"
			echo -e " "
			echo -e "+- System settings:"
			echo -e "1) IP settings"
			echo -e ""
			echo -e "e. Exit"
			echo -e -n "$green[EFA]$clean : "
			local choice
			read choice
			case $choice in
					1) opt_ip-settings ;;
					2) opt_hostname ;;
					e) exit 0 ;;
					*) echo -e "Error \"$choice\" is not an option..." && sleep 2
			esac
			}
		done
}
# +---------------------------------------------------+

# +---------------------------------------------------+
# Option IP_SETTINGS
# +---------------------------------------------------+
opt_ip-settings(){
	menu=0
	ipmenu=1
	while [ $ipmenu == "1" ]
		do
			func_getipsettings
			func_echo-header
			echo "Current IP settings for $INTERFACE are:"
			echo "1) IP:			$IP"
			echo "2) Netmask:		$NM"
			echo "3) Gateway:		$GW"
			echo "4) Primary DNS:		$DNS1"
			echo "5) Secondary DNS:	$DNS2"
			echo ""
			echo "e) Return to main menu"
			echo ""
			echo "Note: Network will reset when changing values."
			echo ""
			local choice
			read -p "Enter setting you want to change: " choice
			case $choice in
				1) 	ipmenu=0
					echo ""
					read -p "Enter your new IP: " IP
					func_setipsettings
					menu=1
					;;
				2)  ipmenu=0
					echo ""
					read -p "Enter your new netmask: " NM
					func_setipsettings
					menu=1
					;;
				3)  ipmenu=0
					echo ""
					read -p "Enter your new gateway: " GW
					func_setipsettings
					menu=1
					;;
				4) 	ipmenu=0
					echo ""
					read -p "Enter your new primary DNS: " DNS1
					func_setipsettings
					menu=1
					;;
				5) 	ipmenu=0
					echo ""
					read -p "Enter your new secondary DNS: " DNS2
					func_setipsettings
					menu=1
					;;
				e) menu=1 && return ;;
				*) echo -e "Error \"$choice\" is not an option..." && sleep 2
			esac
		done
}
# +---------------------------------------------------+

# +---------------------------------------------------+
# Function to grab the current IP settings.
# +---------------------------------------------------+
function func_getipsettings(){

	nrintf=`cat /proc/net/dev | grep eth | awk {' print $1 '} | sed 's/://g' | wc -l`
	interf=`cat /proc/net/dev | grep eth | awk {' print $1 '} | sed 's/://g'`
	IP="`cat /etc/network/interfaces.d/$INTERFACE | grep address | awk {' print $2 '}`"
	NM="`cat /etc/network/interfaces.d/$INTERFACE | grep netmask | awk {' print $2 '}`"
	GW="`cat /etc/network/interfaces.d/$INTERFACE | grep gateway | awk {' print $2 '}`"
	DNS1="`cat /etc/resolv.conf  | grep nameserver | awk 'NR==1 {print $2}'`"
	DNS2="`cat /etc/resolv.conf  | grep nameserver | awk 'NR==2 {print $2}'`"
	if [ $nrintf -gt 1 ]
	 then
		clear         
		echo "----------------- E.F.A -----------------"
		echo "-------------- IP SETTINGS --------------"
		echo " "
		echo "You seem to have multiple network interfaces"
		echo "Please select the interface you want to configure"
		echo "The interface names on your machine are:"
		for int in $interf
			do
				echo " - $int"
			done

        local choice
        read -p "Enter the primary interface name: " choice
        choice_check=0
        for int in $interf
         do
          if [ $int == $choice ]
           then
            choice_check=1
           fi
         done

         # Check if the user typed a interface that exists.
         if [ $choice_check -eq 0 ]
          then
            echo "ERROR, That interface does not exist."
            sleep 2
            func_getipsettings
            return
          fi

        if [ $choice_check -eq 1 ]
         then
          INTERFACE=$choice
        fi

  else
        INTERFACE=$interf
fi
}
# +---------------------------------------------------+

# +---------------------------------------------------+
# Function to set the new IP settings
# +---------------------------------------------------+
func_setipsettings(){
	for ip in $IP $NM $GW $DNS1 $DNS2
		do
			validcheck=1
			while [ $validcheck != 0 ]
				do
					if checkip $ip
						then
							validcheck=0
						else
							echo "ERROR: The value $ip seems to be invalid"
							pause
							return
					fi
				done
		done
	# Grab current FQDN
	HOSTNAME="`cat /etc/mailname | sed  's/\..*//'`"
	DOMAINNAME="`cat /etc/mailname | sed -n 's/[^.]*\.//p'`"

	# Stopping services
	/etc/init.d/rabbitmq-server	stop >> /dev/null

	# Edit hosts file
	echo "127.0.0.1		localhost" > /etc/hosts
	echo "$IP	$HOSTNAME.$DOMAINNAME	$HOSTNAME" >> /etc/hosts
	echo "" >> /etc/hosts
	echo "# The following lines are desirable for IPv6 capable hosts" >> /etc/hosts
	echo "::1     ip6-localhost ip6-loopback" >> /etc/hosts
	echo "fe00::0 ip6-localnet" >> /etc/hosts
	echo "ff00::0 ip6-mcastprefix" >> /etc/hosts
	echo "ff02::1 ip6-allnodes" >> /etc/hosts
	echo "ff02::2 ip6-allrouters" >> /etc/hosts

	# Edit resolv.conf
	echo "nameserver $DNS1" > /etc/resolv.conf
	echo "nameserver $DNS2" >> /etc/resolv.conf
	
	/etc/init.d/networking stop >> /dev/null
	# Edit interfaces
	echo "auto $INTERFACE" > /etc/network/interfaces.d/$INTERFACE
	echo "iface $INTERFACE inet static" >> /etc/network/interfaces.d/$INTERFACE
	if [ -n "$IP" ]; then
		echo "        address $IP" >> /etc/network/interfaces.d/$INTERFACE
	fi
	if [ -n "$NM" ]; then
		echo "        netmask $NM" >> /etc/network/interfaces.d/$INTERFACE
	fi
	if [ -n "$GW" ]; then
		echo "        gateway $GW" >> /etc/network/interfaces.d/$INTERFACE
	fi
	if [ -n "$DNS1" ]; then
		echo "        dns-nameservers $DNS1 $DNS2" >> /etc/network/interfaces.d/$INTERFACE
	fi
	
	echo ""
	/etc/init.d/networking start
	/etc/init.d/rabbitmq-server	start >> /dev/null
	echo ""
	pause
}
# +---------------------------------------------------+

# +---------------------------------------------------+
# Trap CTRL+C, CTRL+Z and quit singles
# +---------------------------------------------------+
trap '' SIGINT SIGQUIT SIGTSTP
# +---------------------------------------------------+

# +---------------------------------------------------+
# Pause
# +---------------------------------------------------+
pause(){
	read -p "Press [Enter] key to continue..." fackEnterKey
}
# +---------------------------------------------------+

# +---------------------------------------------------+
# Function to test IP addresses
# +---------------------------------------------------+
function checkip(){
	local ip=$1
	local stat=1

	if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
		OIFS=$IFS
		IFS='.'
		ip=($ip)
		IFS=$OIFS
		[[ ${ip[0]} -le 255 && ${ip[1]} -le 255 && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
		stat=$?
	fi
	return $stat
}
# +---------------------------------------------------+


# +---------------------------------------------------+
# Menu header
# +---------------------------------------------------+
func_echo-header(){
clear
echo -e "--------------------------------------------------------------"
echo -e "---        Welcome to the EFA Configuration program        ---"
echo -e "---                http://www.efa-project.org              ---"
echo -e "--------------------------------------------------------------"
echo ""
}
# +---------------------------------------------------+

# +---------------------------------------------------+
# Main logic
# +---------------------------------------------------+
clear
red='\E[00;31m'
green='\E[00;32m'
yellow='\E[00;33m'
blue='\E[00;34m'
magenta='\E[00;35'
cyan='\E[00;36m'
clean='\e[00m'

if [ `whoami` == root ]
	then
		menu="1"
		while [ $menu == "1" ]
		do
			show_menu
		done
	else
		echo "$red[EFA] ERROR: Please become root.$clean"
		exit 0
	fi
# +---------------------------------------------------+